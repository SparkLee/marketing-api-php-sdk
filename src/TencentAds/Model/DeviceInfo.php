<?php
/**
 * DeviceInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * DeviceInfo Class Doc Comment
 *
 * @category Class
 * @description 拓展设备信息
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'device_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'packageName' => 'string',
        'appVersion' => 'string',
        'mac' => 'string',
        'deviceBrand' => 'string',
        'model' => 'string',
        'osVersion' => 'string',
        'language' => 'string',
        'ip' => 'string',
        'userAgent' => 'string',
        'wifiName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'packageName' => null,
        'appVersion' => null,
        'mac' => null,
        'deviceBrand' => null,
        'model' => null,
        'osVersion' => null,
        'language' => null,
        'ip' => null,
        'userAgent' => null,
        'wifiName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'packageName' => 'package_name',
        'appVersion' => 'app_version',
        'mac' => 'mac',
        'deviceBrand' => 'device_brand',
        'model' => 'model',
        'osVersion' => 'os_version',
        'language' => 'language',
        'ip' => 'ip',
        'userAgent' => 'user_agent',
        'wifiName' => 'wifi_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'packageName' => 'setPackageName',
        'appVersion' => 'setAppVersion',
        'mac' => 'setMac',
        'deviceBrand' => 'setDeviceBrand',
        'model' => 'setModel',
        'osVersion' => 'setOsVersion',
        'language' => 'setLanguage',
        'ip' => 'setIp',
        'userAgent' => 'setUserAgent',
        'wifiName' => 'setWifiName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'packageName' => 'getPackageName',
        'appVersion' => 'getAppVersion',
        'mac' => 'getMac',
        'deviceBrand' => 'getDeviceBrand',
        'model' => 'getModel',
        'osVersion' => 'getOsVersion',
        'language' => 'getLanguage',
        'ip' => 'getIp',
        'userAgent' => 'getUserAgent',
        'wifiName' => 'getWifiName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['packageName'] = isset($data['packageName']) ? $data['packageName'] : null;
        $this->container['appVersion'] = isset($data['appVersion']) ? $data['appVersion'] : null;
        $this->container['mac'] = isset($data['mac']) ? $data['mac'] : null;
        $this->container['deviceBrand'] = isset($data['deviceBrand']) ? $data['deviceBrand'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['osVersion'] = isset($data['osVersion']) ? $data['osVersion'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['userAgent'] = isset($data['userAgent']) ? $data['userAgent'] : null;
        $this->container['wifiName'] = isset($data['wifiName']) ? $data['wifiName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets packageName
     *
     * @return string|mixed
     */
    public function getPackageName()
    {
        return $this->container['packageName'];
    }

    /**
     * Sets packageName
     *
     * @param string|mixed $packageName packageName
     *
     * @return $this
     */
    public function setPackageName($packageName)
    {
        $this->container['packageName'] = $packageName;

        return $this;
    }

    /**
     * Gets appVersion
     *
     * @return string|mixed
     */
    public function getAppVersion()
    {
        return $this->container['appVersion'];
    }

    /**
     * Sets appVersion
     *
     * @param string|mixed $appVersion appVersion
     *
     * @return $this
     */
    public function setAppVersion($appVersion)
    {
        $this->container['appVersion'] = $appVersion;

        return $this;
    }

    /**
     * Gets mac
     *
     * @return string|mixed
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string|mixed $mac mac
     *
     * @return $this
     */
    public function setMac($mac)
    {
        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets deviceBrand
     *
     * @return string|mixed
     */
    public function getDeviceBrand()
    {
        return $this->container['deviceBrand'];
    }

    /**
     * Sets deviceBrand
     *
     * @param string|mixed $deviceBrand deviceBrand
     *
     * @return $this
     */
    public function setDeviceBrand($deviceBrand)
    {
        $this->container['deviceBrand'] = $deviceBrand;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|mixed
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|mixed $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets osVersion
     *
     * @return string|mixed
     */
    public function getOsVersion()
    {
        return $this->container['osVersion'];
    }

    /**
     * Sets osVersion
     *
     * @param string|mixed $osVersion osVersion
     *
     * @return $this
     */
    public function setOsVersion($osVersion)
    {
        $this->container['osVersion'] = $osVersion;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|mixed
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|mixed $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|mixed
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|mixed $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets userAgent
     *
     * @return string|mixed
     */
    public function getUserAgent()
    {
        return $this->container['userAgent'];
    }

    /**
     * Sets userAgent
     *
     * @param string|mixed $userAgent userAgent
     *
     * @return $this
     */
    public function setUserAgent($userAgent)
    {
        $this->container['userAgent'] = $userAgent;

        return $this;
    }

    /**
     * Gets wifiName
     *
     * @return string|mixed
     */
    public function getWifiName()
    {
        return $this->container['wifiName'];
    }

    /**
     * Sets wifiName
     *
     * @param string|mixed $wifiName wifiName
     *
     * @return $this
     */
    public function setWifiName($wifiName)
    {
        $this->container['wifiName'] = $wifiName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


