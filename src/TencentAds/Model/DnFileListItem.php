<?php
/**
 * DnFileListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * DnFileListItem Class Doc Comment
 *
 * @category Class
 * @description 文件信息
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DnFileListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'dn_file_list_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fileId' => 'int',
        'fileName' => 'string',
        'fileDesc' => 'string',
        'status' => '\TencentAds\Model\DnFileStatus',
        'acccessWay' => '\TencentAds\Model\DnFileAccessWayType',
        'scenes' => '\TencentAds\Model\SceneStatusRead[]',
        'createTime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fileId' => 'int64',
        'fileName' => null,
        'fileDesc' => null,
        'status' => null,
        'acccessWay' => null,
        'scenes' => null,
        'createTime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fileId' => 'file_id',
        'fileName' => 'file_name',
        'fileDesc' => 'file_desc',
        'status' => 'status',
        'acccessWay' => 'acccess_way',
        'scenes' => 'scenes',
        'createTime' => 'create_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fileId' => 'setFileId',
        'fileName' => 'setFileName',
        'fileDesc' => 'setFileDesc',
        'status' => 'setStatus',
        'acccessWay' => 'setAcccessWay',
        'scenes' => 'setScenes',
        'createTime' => 'setCreateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fileId' => 'getFileId',
        'fileName' => 'getFileName',
        'fileDesc' => 'getFileDesc',
        'status' => 'getStatus',
        'acccessWay' => 'getAcccessWay',
        'scenes' => 'getScenes',
        'createTime' => 'getCreateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fileId'] = isset($data['fileId']) ? $data['fileId'] : null;
        $this->container['fileName'] = isset($data['fileName']) ? $data['fileName'] : null;
        $this->container['fileDesc'] = isset($data['fileDesc']) ? $data['fileDesc'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['acccessWay'] = isset($data['acccessWay']) ? $data['acccessWay'] : null;
        $this->container['scenes'] = isset($data['scenes']) ? $data['scenes'] : null;
        $this->container['createTime'] = isset($data['createTime']) ? $data['createTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fileId
     *
     * @return int|mixed
     */
    public function getFileId()
    {
        return $this->container['fileId'];
    }

    /**
     * Sets fileId
     *
     * @param int|mixed $fileId fileId
     *
     * @return $this
     */
    public function setFileId($fileId)
    {
        $this->container['fileId'] = $fileId;

        return $this;
    }

    /**
     * Gets fileName
     *
     * @return string|mixed
     */
    public function getFileName()
    {
        return $this->container['fileName'];
    }

    /**
     * Sets fileName
     *
     * @param string|mixed $fileName fileName
     *
     * @return $this
     */
    public function setFileName($fileName)
    {
        $this->container['fileName'] = $fileName;

        return $this;
    }

    /**
     * Gets fileDesc
     *
     * @return string|mixed
     */
    public function getFileDesc()
    {
        return $this->container['fileDesc'];
    }

    /**
     * Sets fileDesc
     *
     * @param string|mixed $fileDesc fileDesc
     *
     * @return $this
     */
    public function setFileDesc($fileDesc)
    {
        $this->container['fileDesc'] = $fileDesc;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \TencentAds\Model\DnFileStatus|mixed
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \TencentAds\Model\DnFileStatus|mixed $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets acccessWay
     *
     * @return \TencentAds\Model\DnFileAccessWayType|mixed
     */
    public function getAcccessWay()
    {
        return $this->container['acccessWay'];
    }

    /**
     * Sets acccessWay
     *
     * @param \TencentAds\Model\DnFileAccessWayType|mixed $acccessWay acccessWay
     *
     * @return $this
     */
    public function setAcccessWay($acccessWay)
    {
        $this->container['acccessWay'] = $acccessWay;

        return $this;
    }

    /**
     * Gets scenes
     *
     * @return \TencentAds\Model\SceneStatusRead[]|mixed
     */
    public function getScenes()
    {
        return $this->container['scenes'];
    }

    /**
     * Sets scenes
     *
     * @param \TencentAds\Model\SceneStatusRead[]|mixed $scenes scenes
     *
     * @return $this
     */
    public function setScenes($scenes)
    {
        $this->container['scenes'] = $scenes;

        return $this;
    }

    /**
     * Gets createTime
     *
     * @return string|mixed
     */
    public function getCreateTime()
    {
        return $this->container['createTime'];
    }

    /**
     * Sets createTime
     *
     * @param string|mixed $createTime createTime
     *
     * @return $this
     */
    public function setCreateTime($createTime)
    {
        $this->container['createTime'] = $createTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


