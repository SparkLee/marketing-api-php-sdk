<?php
/**
 * WechatInfoStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * WechatInfoStruct Class Doc Comment
 *
 * @category Class
 * @description 微信号信息数据结构
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WechatInfoStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'wechat_info_struct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'wechatId' => 'int',
        'type' => '\TencentAds\Model\WechatAccountType',
        'name' => 'string',
        'nickName' => 'string',
        'codeUrl' => 'string',
        'enableFalg' => 'int',
        'isDeleted' => 'int',
        'statusDesc' => 'string',
        'updateTime' => 'string',
        'createTime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'wechatId' => 'int64',
        'type' => null,
        'name' => null,
        'nickName' => null,
        'codeUrl' => null,
        'enableFalg' => 'int64',
        'isDeleted' => 'int64',
        'statusDesc' => null,
        'updateTime' => null,
        'createTime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'wechatId' => 'wechat_id',
        'type' => 'type',
        'name' => 'name',
        'nickName' => 'nick_name',
        'codeUrl' => 'code_url',
        'enableFalg' => 'enable_falg',
        'isDeleted' => 'is_deleted',
        'statusDesc' => 'status_desc',
        'updateTime' => 'update_time',
        'createTime' => 'create_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'wechatId' => 'setWechatId',
        'type' => 'setType',
        'name' => 'setName',
        'nickName' => 'setNickName',
        'codeUrl' => 'setCodeUrl',
        'enableFalg' => 'setEnableFalg',
        'isDeleted' => 'setIsDeleted',
        'statusDesc' => 'setStatusDesc',
        'updateTime' => 'setUpdateTime',
        'createTime' => 'setCreateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'wechatId' => 'getWechatId',
        'type' => 'getType',
        'name' => 'getName',
        'nickName' => 'getNickName',
        'codeUrl' => 'getCodeUrl',
        'enableFalg' => 'getEnableFalg',
        'isDeleted' => 'getIsDeleted',
        'statusDesc' => 'getStatusDesc',
        'updateTime' => 'getUpdateTime',
        'createTime' => 'getCreateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['wechatId'] = isset($data['wechatId']) ? $data['wechatId'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['nickName'] = isset($data['nickName']) ? $data['nickName'] : null;
        $this->container['codeUrl'] = isset($data['codeUrl']) ? $data['codeUrl'] : null;
        $this->container['enableFalg'] = isset($data['enableFalg']) ? $data['enableFalg'] : null;
        $this->container['isDeleted'] = isset($data['isDeleted']) ? $data['isDeleted'] : null;
        $this->container['statusDesc'] = isset($data['statusDesc']) ? $data['statusDesc'] : null;
        $this->container['updateTime'] = isset($data['updateTime']) ? $data['updateTime'] : null;
        $this->container['createTime'] = isset($data['createTime']) ? $data['createTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets wechatId
     *
     * @return int|mixed
     */
    public function getWechatId()
    {
        return $this->container['wechatId'];
    }

    /**
     * Sets wechatId
     *
     * @param int|mixed $wechatId wechatId
     *
     * @return $this
     */
    public function setWechatId($wechatId)
    {
        $this->container['wechatId'] = $wechatId;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \TencentAds\Model\WechatAccountType|mixed
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \TencentAds\Model\WechatAccountType|mixed $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|mixed
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|mixed $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nickName
     *
     * @return string|mixed
     */
    public function getNickName()
    {
        return $this->container['nickName'];
    }

    /**
     * Sets nickName
     *
     * @param string|mixed $nickName nickName
     *
     * @return $this
     */
    public function setNickName($nickName)
    {
        $this->container['nickName'] = $nickName;

        return $this;
    }

    /**
     * Gets codeUrl
     *
     * @return string|mixed
     */
    public function getCodeUrl()
    {
        return $this->container['codeUrl'];
    }

    /**
     * Sets codeUrl
     *
     * @param string|mixed $codeUrl codeUrl
     *
     * @return $this
     */
    public function setCodeUrl($codeUrl)
    {
        $this->container['codeUrl'] = $codeUrl;

        return $this;
    }

    /**
     * Gets enableFalg
     *
     * @return int|mixed
     */
    public function getEnableFalg()
    {
        return $this->container['enableFalg'];
    }

    /**
     * Sets enableFalg
     *
     * @param int|mixed $enableFalg enableFalg
     *
     * @return $this
     */
    public function setEnableFalg($enableFalg)
    {
        $this->container['enableFalg'] = $enableFalg;

        return $this;
    }

    /**
     * Gets isDeleted
     *
     * @return int|mixed
     */
    public function getIsDeleted()
    {
        return $this->container['isDeleted'];
    }

    /**
     * Sets isDeleted
     *
     * @param int|mixed $isDeleted isDeleted
     *
     * @return $this
     */
    public function setIsDeleted($isDeleted)
    {
        $this->container['isDeleted'] = $isDeleted;

        return $this;
    }

    /**
     * Gets statusDesc
     *
     * @return string|mixed
     */
    public function getStatusDesc()
    {
        return $this->container['statusDesc'];
    }

    /**
     * Sets statusDesc
     *
     * @param string|mixed $statusDesc statusDesc
     *
     * @return $this
     */
    public function setStatusDesc($statusDesc)
    {
        $this->container['statusDesc'] = $statusDesc;

        return $this;
    }

    /**
     * Gets updateTime
     *
     * @return string|mixed
     */
    public function getUpdateTime()
    {
        return $this->container['updateTime'];
    }

    /**
     * Sets updateTime
     *
     * @param string|mixed $updateTime updateTime
     *
     * @return $this
     */
    public function setUpdateTime($updateTime)
    {
        $this->container['updateTime'] = $updateTime;

        return $this;
    }

    /**
     * Gets createTime
     *
     * @return string|mixed
     */
    public function getCreateTime()
    {
        return $this->container['createTime'];
    }

    /**
     * Sets createTime
     *
     * @param string|mixed $createTime createTime
     *
     * @return $this
     */
    public function setCreateTime($createTime)
    {
        $this->container['createTime'] = $createTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


