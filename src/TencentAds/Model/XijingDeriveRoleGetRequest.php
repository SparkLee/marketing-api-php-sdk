<?php
/**
 * XijingDeriveRoleGetRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * XijingDeriveRoleGetRequest Class Doc Comment
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class XijingDeriveRoleGetRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'XijingDeriveRoleGetRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accountId' => 'int',
        'roleId' => 'string',
        'copywriting' => 'string',
        'layout' => '\TencentAds\Model\Layout',
        'isLoop' => 'bool',
        'isClose' => 'bool',
        'isDownload' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accountId' => 'int64',
        'roleId' => null,
        'copywriting' => null,
        'layout' => null,
        'isLoop' => null,
        'isClose' => null,
        'isDownload' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'account_id',
        'roleId' => 'role_id',
        'copywriting' => 'copywriting',
        'layout' => 'layout',
        'isLoop' => 'is_loop',
        'isClose' => 'is_close',
        'isDownload' => 'is_download'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'roleId' => 'setRoleId',
        'copywriting' => 'setCopywriting',
        'layout' => 'setLayout',
        'isLoop' => 'setIsLoop',
        'isClose' => 'setIsClose',
        'isDownload' => 'setIsDownload'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'roleId' => 'getRoleId',
        'copywriting' => 'getCopywriting',
        'layout' => 'getLayout',
        'isLoop' => 'getIsLoop',
        'isClose' => 'getIsClose',
        'isDownload' => 'getIsDownload'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['roleId'] = isset($data['roleId']) ? $data['roleId'] : null;
        $this->container['copywriting'] = isset($data['copywriting']) ? $data['copywriting'] : null;
        $this->container['layout'] = isset($data['layout']) ? $data['layout'] : null;
        $this->container['isLoop'] = isset($data['isLoop']) ? $data['isLoop'] : null;
        $this->container['isClose'] = isset($data['isClose']) ? $data['isClose'] : null;
        $this->container['isDownload'] = isset($data['isDownload']) ? $data['isDownload'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return int|mixed
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int|mixed $accountId accountId
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets roleId
     *
     * @return string|mixed
     */
    public function getRoleId()
    {
        return $this->container['roleId'];
    }

    /**
     * Sets roleId
     *
     * @param string|mixed $roleId roleId
     *
     * @return $this
     */
    public function setRoleId($roleId)
    {
        $this->container['roleId'] = $roleId;

        return $this;
    }

    /**
     * Gets copywriting
     *
     * @return string|mixed
     */
    public function getCopywriting()
    {
        return $this->container['copywriting'];
    }

    /**
     * Sets copywriting
     *
     * @param string|mixed $copywriting copywriting
     *
     * @return $this
     */
    public function setCopywriting($copywriting)
    {
        $this->container['copywriting'] = $copywriting;

        return $this;
    }

    /**
     * Gets layout
     *
     * @return \TencentAds\Model\Layout|mixed
     */
    public function getLayout()
    {
        return $this->container['layout'];
    }

    /**
     * Sets layout
     *
     * @param \TencentAds\Model\Layout|mixed $layout layout
     *
     * @return $this
     */
    public function setLayout($layout)
    {
        $this->container['layout'] = $layout;

        return $this;
    }

    /**
     * Gets isLoop
     *
     * @return bool|mixed
     */
    public function getIsLoop()
    {
        return $this->container['isLoop'];
    }

    /**
     * Sets isLoop
     *
     * @param bool|mixed $isLoop isLoop
     *
     * @return $this
     */
    public function setIsLoop($isLoop)
    {
        $this->container['isLoop'] = $isLoop;

        return $this;
    }

    /**
     * Gets isClose
     *
     * @return bool|mixed
     */
    public function getIsClose()
    {
        return $this->container['isClose'];
    }

    /**
     * Sets isClose
     *
     * @param bool|mixed $isClose isClose
     *
     * @return $this
     */
    public function setIsClose($isClose)
    {
        $this->container['isClose'] = $isClose;

        return $this;
    }

    /**
     * Gets isDownload
     *
     * @return bool|mixed
     */
    public function getIsDownload()
    {
        return $this->container['isDownload'];
    }

    /**
     * Sets isDownload
     *
     * @param bool|mixed $isDownload isDownload
     *
     * @return $this
     */
    public function setIsDownload($isDownload)
    {
        $this->container['isDownload'] = $isDownload;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


