<?php
/**
 * SideBarFloatSpecSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * SideBarFloatSpecSpec Class Doc Comment
 *
 * @category Class
 * @description 侧边悬浮组件元素
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SideBarFloatSpecSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'side_bar_float_spec_spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'wording' => 'string',
        'titleColor' => 'string',
        'elemType' => '\TencentAds\Model\CanvasSideBarFloatElementType',
        'telSpec' => '\TencentAds\Model\SideBarFloatTelSpec',
        'wechatServiceSpec' => '\TencentAds\Model\WechatServiceSpec',
        'enterpriseWxSpec' => '\TencentAds\Model\EnterpriseWxSpec'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'wording' => null,
        'titleColor' => null,
        'elemType' => null,
        'telSpec' => null,
        'wechatServiceSpec' => null,
        'enterpriseWxSpec' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'wording' => 'wording',
        'titleColor' => 'title_color',
        'elemType' => 'elem_type',
        'telSpec' => 'tel_spec',
        'wechatServiceSpec' => 'wechat_service_spec',
        'enterpriseWxSpec' => 'enterprise_wx_spec'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'wording' => 'setWording',
        'titleColor' => 'setTitleColor',
        'elemType' => 'setElemType',
        'telSpec' => 'setTelSpec',
        'wechatServiceSpec' => 'setWechatServiceSpec',
        'enterpriseWxSpec' => 'setEnterpriseWxSpec'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'wording' => 'getWording',
        'titleColor' => 'getTitleColor',
        'elemType' => 'getElemType',
        'telSpec' => 'getTelSpec',
        'wechatServiceSpec' => 'getWechatServiceSpec',
        'enterpriseWxSpec' => 'getEnterpriseWxSpec'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['wording'] = isset($data['wording']) ? $data['wording'] : null;
        $this->container['titleColor'] = isset($data['titleColor']) ? $data['titleColor'] : null;
        $this->container['elemType'] = isset($data['elemType']) ? $data['elemType'] : null;
        $this->container['telSpec'] = isset($data['telSpec']) ? $data['telSpec'] : null;
        $this->container['wechatServiceSpec'] = isset($data['wechatServiceSpec']) ? $data['wechatServiceSpec'] : null;
        $this->container['enterpriseWxSpec'] = isset($data['enterpriseWxSpec']) ? $data['enterpriseWxSpec'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets wording
     *
     * @return string|mixed
     */
    public function getWording()
    {
        return $this->container['wording'];
    }

    /**
     * Sets wording
     *
     * @param string|mixed $wording wording
     *
     * @return $this
     */
    public function setWording($wording)
    {
        $this->container['wording'] = $wording;

        return $this;
    }

    /**
     * Gets titleColor
     *
     * @return string|mixed
     */
    public function getTitleColor()
    {
        return $this->container['titleColor'];
    }

    /**
     * Sets titleColor
     *
     * @param string|mixed $titleColor titleColor
     *
     * @return $this
     */
    public function setTitleColor($titleColor)
    {
        $this->container['titleColor'] = $titleColor;

        return $this;
    }

    /**
     * Gets elemType
     *
     * @return \TencentAds\Model\CanvasSideBarFloatElementType|mixed
     */
    public function getElemType()
    {
        return $this->container['elemType'];
    }

    /**
     * Sets elemType
     *
     * @param \TencentAds\Model\CanvasSideBarFloatElementType|mixed $elemType elemType
     *
     * @return $this
     */
    public function setElemType($elemType)
    {
        $this->container['elemType'] = $elemType;

        return $this;
    }

    /**
     * Gets telSpec
     *
     * @return \TencentAds\Model\SideBarFloatTelSpec|mixed
     */
    public function getTelSpec()
    {
        return $this->container['telSpec'];
    }

    /**
     * Sets telSpec
     *
     * @param \TencentAds\Model\SideBarFloatTelSpec|mixed $telSpec telSpec
     *
     * @return $this
     */
    public function setTelSpec($telSpec)
    {
        $this->container['telSpec'] = $telSpec;

        return $this;
    }

    /**
     * Gets wechatServiceSpec
     *
     * @return \TencentAds\Model\WechatServiceSpec|mixed
     */
    public function getWechatServiceSpec()
    {
        return $this->container['wechatServiceSpec'];
    }

    /**
     * Sets wechatServiceSpec
     *
     * @param \TencentAds\Model\WechatServiceSpec|mixed $wechatServiceSpec wechatServiceSpec
     *
     * @return $this
     */
    public function setWechatServiceSpec($wechatServiceSpec)
    {
        $this->container['wechatServiceSpec'] = $wechatServiceSpec;

        return $this;
    }

    /**
     * Gets enterpriseWxSpec
     *
     * @return \TencentAds\Model\EnterpriseWxSpec|mixed
     */
    public function getEnterpriseWxSpec()
    {
        return $this->container['enterpriseWxSpec'];
    }

    /**
     * Sets enterpriseWxSpec
     *
     * @param \TencentAds\Model\EnterpriseWxSpec|mixed $enterpriseWxSpec enterpriseWxSpec
     *
     * @return $this
     */
    public function setEnterpriseWxSpec($enterpriseWxSpec)
    {
        $this->container['enterpriseWxSpec'] = $enterpriseWxSpec;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


