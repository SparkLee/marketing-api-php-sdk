<?php
/**
 * CreativeSampleProductsGetRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * CreativeSampleProductsGetRequest Class Doc Comment
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreativeSampleProductsGetRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreativeSampleProductsGetRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accountId' => 'int',
        'productCatalogId' => 'int',
        'productOuterIds' => 'string[]',
        'productSeriesId' => 'int',
        'templateId' => 'int',
        'templateType' => '\TencentAds\Model\TemplateType',
        'imageId' => 'string',
        'videoId' => 'string',
        'productFields' => 'string[]',
        'limit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accountId' => 'int64',
        'productCatalogId' => 'int64',
        'productOuterIds' => null,
        'productSeriesId' => 'int64',
        'templateId' => 'int64',
        'templateType' => null,
        'imageId' => null,
        'videoId' => null,
        'productFields' => null,
        'limit' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'account_id',
        'productCatalogId' => 'product_catalog_id',
        'productOuterIds' => 'product_outer_ids',
        'productSeriesId' => 'product_series_id',
        'templateId' => 'template_id',
        'templateType' => 'template_type',
        'imageId' => 'image_id',
        'videoId' => 'video_id',
        'productFields' => 'product_fields',
        'limit' => 'limit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'productCatalogId' => 'setProductCatalogId',
        'productOuterIds' => 'setProductOuterIds',
        'productSeriesId' => 'setProductSeriesId',
        'templateId' => 'setTemplateId',
        'templateType' => 'setTemplateType',
        'imageId' => 'setImageId',
        'videoId' => 'setVideoId',
        'productFields' => 'setProductFields',
        'limit' => 'setLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'productCatalogId' => 'getProductCatalogId',
        'productOuterIds' => 'getProductOuterIds',
        'productSeriesId' => 'getProductSeriesId',
        'templateId' => 'getTemplateId',
        'templateType' => 'getTemplateType',
        'imageId' => 'getImageId',
        'videoId' => 'getVideoId',
        'productFields' => 'getProductFields',
        'limit' => 'getLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['productCatalogId'] = isset($data['productCatalogId']) ? $data['productCatalogId'] : null;
        $this->container['productOuterIds'] = isset($data['productOuterIds']) ? $data['productOuterIds'] : null;
        $this->container['productSeriesId'] = isset($data['productSeriesId']) ? $data['productSeriesId'] : null;
        $this->container['templateId'] = isset($data['templateId']) ? $data['templateId'] : null;
        $this->container['templateType'] = isset($data['templateType']) ? $data['templateType'] : null;
        $this->container['imageId'] = isset($data['imageId']) ? $data['imageId'] : null;
        $this->container['videoId'] = isset($data['videoId']) ? $data['videoId'] : null;
        $this->container['productFields'] = isset($data['productFields']) ? $data['productFields'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return int|mixed
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int|mixed $accountId accountId
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets productCatalogId
     *
     * @return int|mixed
     */
    public function getProductCatalogId()
    {
        return $this->container['productCatalogId'];
    }

    /**
     * Sets productCatalogId
     *
     * @param int|mixed $productCatalogId productCatalogId
     *
     * @return $this
     */
    public function setProductCatalogId($productCatalogId)
    {
        $this->container['productCatalogId'] = $productCatalogId;

        return $this;
    }

    /**
     * Gets productOuterIds
     *
     * @return string[]|mixed
     */
    public function getProductOuterIds()
    {
        return $this->container['productOuterIds'];
    }

    /**
     * Sets productOuterIds
     *
     * @param string[]|mixed $productOuterIds productOuterIds
     *
     * @return $this
     */
    public function setProductOuterIds($productOuterIds)
    {
        $this->container['productOuterIds'] = $productOuterIds;

        return $this;
    }

    /**
     * Gets productSeriesId
     *
     * @return int|mixed
     */
    public function getProductSeriesId()
    {
        return $this->container['productSeriesId'];
    }

    /**
     * Sets productSeriesId
     *
     * @param int|mixed $productSeriesId productSeriesId
     *
     * @return $this
     */
    public function setProductSeriesId($productSeriesId)
    {
        $this->container['productSeriesId'] = $productSeriesId;

        return $this;
    }

    /**
     * Gets templateId
     *
     * @return int|mixed
     */
    public function getTemplateId()
    {
        return $this->container['templateId'];
    }

    /**
     * Sets templateId
     *
     * @param int|mixed $templateId templateId
     *
     * @return $this
     */
    public function setTemplateId($templateId)
    {
        $this->container['templateId'] = $templateId;

        return $this;
    }

    /**
     * Gets templateType
     *
     * @return \TencentAds\Model\TemplateType|mixed
     */
    public function getTemplateType()
    {
        return $this->container['templateType'];
    }

    /**
     * Sets templateType
     *
     * @param \TencentAds\Model\TemplateType|mixed $templateType templateType
     *
     * @return $this
     */
    public function setTemplateType($templateType)
    {
        $this->container['templateType'] = $templateType;

        return $this;
    }

    /**
     * Gets imageId
     *
     * @return string|mixed
     */
    public function getImageId()
    {
        return $this->container['imageId'];
    }

    /**
     * Sets imageId
     *
     * @param string|mixed $imageId imageId
     *
     * @return $this
     */
    public function setImageId($imageId)
    {
        $this->container['imageId'] = $imageId;

        return $this;
    }

    /**
     * Gets videoId
     *
     * @return string|mixed
     */
    public function getVideoId()
    {
        return $this->container['videoId'];
    }

    /**
     * Sets videoId
     *
     * @param string|mixed $videoId videoId
     *
     * @return $this
     */
    public function setVideoId($videoId)
    {
        $this->container['videoId'] = $videoId;

        return $this;
    }

    /**
     * Gets productFields
     *
     * @return string[]|mixed
     */
    public function getProductFields()
    {
        return $this->container['productFields'];
    }

    /**
     * Sets productFields
     *
     * @param string[]|mixed $productFields productFields
     *
     * @return $this
     */
    public function setProductFields($productFields)
    {
        $this->container['productFields'] = $productFields;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|mixed
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|mixed $limit limit
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


