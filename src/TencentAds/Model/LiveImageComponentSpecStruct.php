<?php
/**
 * LiveImageComponentSpecStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * LiveImageComponentSpecStruct Class Doc Comment
 *
 * @category Class
 * @description 喝彩图&amp;背景图创意组件详情
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LiveImageComponentSpecStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'live_image_component_spec_struct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bgImgUrl' => 'string',
        'bgImgId' => 'string',
        'cheerIcon' => '\TencentAds\Model\LiveCheerIconStruct[]',
        'isUseCheerIcon' => 'int',
        'isUseBgImg' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bgImgUrl' => null,
        'bgImgId' => null,
        'cheerIcon' => null,
        'isUseCheerIcon' => 'int64',
        'isUseBgImg' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bgImgUrl' => 'bg_img_url',
        'bgImgId' => 'bg_img_id',
        'cheerIcon' => 'cheer_icon',
        'isUseCheerIcon' => 'is_use_cheer_icon',
        'isUseBgImg' => 'is_use_bg_img'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bgImgUrl' => 'setBgImgUrl',
        'bgImgId' => 'setBgImgId',
        'cheerIcon' => 'setCheerIcon',
        'isUseCheerIcon' => 'setIsUseCheerIcon',
        'isUseBgImg' => 'setIsUseBgImg'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bgImgUrl' => 'getBgImgUrl',
        'bgImgId' => 'getBgImgId',
        'cheerIcon' => 'getCheerIcon',
        'isUseCheerIcon' => 'getIsUseCheerIcon',
        'isUseBgImg' => 'getIsUseBgImg'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bgImgUrl'] = isset($data['bgImgUrl']) ? $data['bgImgUrl'] : null;
        $this->container['bgImgId'] = isset($data['bgImgId']) ? $data['bgImgId'] : null;
        $this->container['cheerIcon'] = isset($data['cheerIcon']) ? $data['cheerIcon'] : null;
        $this->container['isUseCheerIcon'] = isset($data['isUseCheerIcon']) ? $data['isUseCheerIcon'] : null;
        $this->container['isUseBgImg'] = isset($data['isUseBgImg']) ? $data['isUseBgImg'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bgImgUrl
     *
     * @return string|mixed
     */
    public function getBgImgUrl()
    {
        return $this->container['bgImgUrl'];
    }

    /**
     * Sets bgImgUrl
     *
     * @param string|mixed $bgImgUrl bgImgUrl
     *
     * @return $this
     */
    public function setBgImgUrl($bgImgUrl)
    {
        $this->container['bgImgUrl'] = $bgImgUrl;

        return $this;
    }

    /**
     * Gets bgImgId
     *
     * @return string|mixed
     */
    public function getBgImgId()
    {
        return $this->container['bgImgId'];
    }

    /**
     * Sets bgImgId
     *
     * @param string|mixed $bgImgId bgImgId
     *
     * @return $this
     */
    public function setBgImgId($bgImgId)
    {
        $this->container['bgImgId'] = $bgImgId;

        return $this;
    }

    /**
     * Gets cheerIcon
     *
     * @return \TencentAds\Model\LiveCheerIconStruct[]|mixed
     */
    public function getCheerIcon()
    {
        return $this->container['cheerIcon'];
    }

    /**
     * Sets cheerIcon
     *
     * @param \TencentAds\Model\LiveCheerIconStruct[]|mixed $cheerIcon cheerIcon
     *
     * @return $this
     */
    public function setCheerIcon($cheerIcon)
    {
        $this->container['cheerIcon'] = $cheerIcon;

        return $this;
    }

    /**
     * Gets isUseCheerIcon
     *
     * @return int|mixed
     */
    public function getIsUseCheerIcon()
    {
        return $this->container['isUseCheerIcon'];
    }

    /**
     * Sets isUseCheerIcon
     *
     * @param int|mixed $isUseCheerIcon isUseCheerIcon
     *
     * @return $this
     */
    public function setIsUseCheerIcon($isUseCheerIcon)
    {
        $this->container['isUseCheerIcon'] = $isUseCheerIcon;

        return $this;
    }

    /**
     * Gets isUseBgImg
     *
     * @return int|mixed
     */
    public function getIsUseBgImg()
    {
        return $this->container['isUseBgImg'];
    }

    /**
     * Sets isUseBgImg
     *
     * @param int|mixed $isUseBgImg isUseBgImg
     *
     * @return $this
     */
    public function setIsUseBgImg($isUseBgImg)
    {
        $this->container['isUseBgImg'] = $isUseBgImg;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


