<?php
/**
 * GhSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * GhSpec Class Doc Comment
 *
 * @category Class
 * @description 关注公众号组件元素
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GhSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'gh_spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fastFollow' => 'int',
        'btnTitle' => 'string',
        'fontColor' => 'string',
        'btnBgColorTheme' => 'string',
        'btnBorderColorTheme' => 'string',
        'btnFontType' => 'int',
        'paddingTop' => 'int',
        'paddingBottom' => 'int',
        'useIcon' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fastFollow' => 'int64',
        'btnTitle' => null,
        'fontColor' => null,
        'btnBgColorTheme' => null,
        'btnBorderColorTheme' => null,
        'btnFontType' => 'int64',
        'paddingTop' => 'int64',
        'paddingBottom' => 'int64',
        'useIcon' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fastFollow' => 'fast_follow',
        'btnTitle' => 'btn_title',
        'fontColor' => 'font_color',
        'btnBgColorTheme' => 'btn_bg_color_theme',
        'btnBorderColorTheme' => 'btn_border_color_theme',
        'btnFontType' => 'btn_font_type',
        'paddingTop' => 'padding_top',
        'paddingBottom' => 'padding_bottom',
        'useIcon' => 'use_icon'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fastFollow' => 'setFastFollow',
        'btnTitle' => 'setBtnTitle',
        'fontColor' => 'setFontColor',
        'btnBgColorTheme' => 'setBtnBgColorTheme',
        'btnBorderColorTheme' => 'setBtnBorderColorTheme',
        'btnFontType' => 'setBtnFontType',
        'paddingTop' => 'setPaddingTop',
        'paddingBottom' => 'setPaddingBottom',
        'useIcon' => 'setUseIcon'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fastFollow' => 'getFastFollow',
        'btnTitle' => 'getBtnTitle',
        'fontColor' => 'getFontColor',
        'btnBgColorTheme' => 'getBtnBgColorTheme',
        'btnBorderColorTheme' => 'getBtnBorderColorTheme',
        'btnFontType' => 'getBtnFontType',
        'paddingTop' => 'getPaddingTop',
        'paddingBottom' => 'getPaddingBottom',
        'useIcon' => 'getUseIcon'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fastFollow'] = isset($data['fastFollow']) ? $data['fastFollow'] : null;
        $this->container['btnTitle'] = isset($data['btnTitle']) ? $data['btnTitle'] : null;
        $this->container['fontColor'] = isset($data['fontColor']) ? $data['fontColor'] : null;
        $this->container['btnBgColorTheme'] = isset($data['btnBgColorTheme']) ? $data['btnBgColorTheme'] : null;
        $this->container['btnBorderColorTheme'] = isset($data['btnBorderColorTheme']) ? $data['btnBorderColorTheme'] : null;
        $this->container['btnFontType'] = isset($data['btnFontType']) ? $data['btnFontType'] : null;
        $this->container['paddingTop'] = isset($data['paddingTop']) ? $data['paddingTop'] : null;
        $this->container['paddingBottom'] = isset($data['paddingBottom']) ? $data['paddingBottom'] : null;
        $this->container['useIcon'] = isset($data['useIcon']) ? $data['useIcon'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fastFollow
     *
     * @return int|mixed
     */
    public function getFastFollow()
    {
        return $this->container['fastFollow'];
    }

    /**
     * Sets fastFollow
     *
     * @param int|mixed $fastFollow fastFollow
     *
     * @return $this
     */
    public function setFastFollow($fastFollow)
    {
        $this->container['fastFollow'] = $fastFollow;

        return $this;
    }

    /**
     * Gets btnTitle
     *
     * @return string|mixed
     */
    public function getBtnTitle()
    {
        return $this->container['btnTitle'];
    }

    /**
     * Sets btnTitle
     *
     * @param string|mixed $btnTitle btnTitle
     *
     * @return $this
     */
    public function setBtnTitle($btnTitle)
    {
        $this->container['btnTitle'] = $btnTitle;

        return $this;
    }

    /**
     * Gets fontColor
     *
     * @return string|mixed
     */
    public function getFontColor()
    {
        return $this->container['fontColor'];
    }

    /**
     * Sets fontColor
     *
     * @param string|mixed $fontColor fontColor
     *
     * @return $this
     */
    public function setFontColor($fontColor)
    {
        $this->container['fontColor'] = $fontColor;

        return $this;
    }

    /**
     * Gets btnBgColorTheme
     *
     * @return string|mixed
     */
    public function getBtnBgColorTheme()
    {
        return $this->container['btnBgColorTheme'];
    }

    /**
     * Sets btnBgColorTheme
     *
     * @param string|mixed $btnBgColorTheme btnBgColorTheme
     *
     * @return $this
     */
    public function setBtnBgColorTheme($btnBgColorTheme)
    {
        $this->container['btnBgColorTheme'] = $btnBgColorTheme;

        return $this;
    }

    /**
     * Gets btnBorderColorTheme
     *
     * @return string|mixed
     */
    public function getBtnBorderColorTheme()
    {
        return $this->container['btnBorderColorTheme'];
    }

    /**
     * Sets btnBorderColorTheme
     *
     * @param string|mixed $btnBorderColorTheme btnBorderColorTheme
     *
     * @return $this
     */
    public function setBtnBorderColorTheme($btnBorderColorTheme)
    {
        $this->container['btnBorderColorTheme'] = $btnBorderColorTheme;

        return $this;
    }

    /**
     * Gets btnFontType
     *
     * @return int|mixed
     */
    public function getBtnFontType()
    {
        return $this->container['btnFontType'];
    }

    /**
     * Sets btnFontType
     *
     * @param int|mixed $btnFontType btnFontType
     *
     * @return $this
     */
    public function setBtnFontType($btnFontType)
    {
        $this->container['btnFontType'] = $btnFontType;

        return $this;
    }

    /**
     * Gets paddingTop
     *
     * @return int|mixed
     */
    public function getPaddingTop()
    {
        return $this->container['paddingTop'];
    }

    /**
     * Sets paddingTop
     *
     * @param int|mixed $paddingTop paddingTop
     *
     * @return $this
     */
    public function setPaddingTop($paddingTop)
    {
        $this->container['paddingTop'] = $paddingTop;

        return $this;
    }

    /**
     * Gets paddingBottom
     *
     * @return int|mixed
     */
    public function getPaddingBottom()
    {
        return $this->container['paddingBottom'];
    }

    /**
     * Sets paddingBottom
     *
     * @param int|mixed $paddingBottom paddingBottom
     *
     * @return $this
     */
    public function setPaddingBottom($paddingBottom)
    {
        $this->container['paddingBottom'] = $paddingBottom;

        return $this;
    }

    /**
     * Gets useIcon
     *
     * @return int|mixed
     */
    public function getUseIcon()
    {
        return $this->container['useIcon'];
    }

    /**
     * Sets useIcon
     *
     * @param int|mixed $useIcon useIcon
     *
     * @return $this
     */
    public function setUseIcon($useIcon)
    {
        $this->container['useIcon'] = $useIcon;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


