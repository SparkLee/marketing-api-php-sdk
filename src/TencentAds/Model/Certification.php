<?php
/**
 * Certification
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * Certification Class Doc Comment
 *
 * @category Class
 * @description 资质
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Certification implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'certification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'certificationImage' => 'string',
        'certificationImagePageNo' => 'int',
        'certificationCode' => 'string',
        'certificationName' => 'string',
        'certificationNumber' => 'string',
        'certificationId' => 'int',
        'certificationImageId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'certificationImage' => null,
        'certificationImagePageNo' => 'int64',
        'certificationCode' => null,
        'certificationName' => null,
        'certificationNumber' => null,
        'certificationId' => 'int64',
        'certificationImageId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'certificationImage' => 'certification_image',
        'certificationImagePageNo' => 'certification_image_page_no',
        'certificationCode' => 'certification_code',
        'certificationName' => 'certification_name',
        'certificationNumber' => 'certification_number',
        'certificationId' => 'certification_id',
        'certificationImageId' => 'certification_image_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'certificationImage' => 'setCertificationImage',
        'certificationImagePageNo' => 'setCertificationImagePageNo',
        'certificationCode' => 'setCertificationCode',
        'certificationName' => 'setCertificationName',
        'certificationNumber' => 'setCertificationNumber',
        'certificationId' => 'setCertificationId',
        'certificationImageId' => 'setCertificationImageId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'certificationImage' => 'getCertificationImage',
        'certificationImagePageNo' => 'getCertificationImagePageNo',
        'certificationCode' => 'getCertificationCode',
        'certificationName' => 'getCertificationName',
        'certificationNumber' => 'getCertificationNumber',
        'certificationId' => 'getCertificationId',
        'certificationImageId' => 'getCertificationImageId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['certificationImage'] = isset($data['certificationImage']) ? $data['certificationImage'] : null;
        $this->container['certificationImagePageNo'] = isset($data['certificationImagePageNo']) ? $data['certificationImagePageNo'] : null;
        $this->container['certificationCode'] = isset($data['certificationCode']) ? $data['certificationCode'] : null;
        $this->container['certificationName'] = isset($data['certificationName']) ? $data['certificationName'] : null;
        $this->container['certificationNumber'] = isset($data['certificationNumber']) ? $data['certificationNumber'] : null;
        $this->container['certificationId'] = isset($data['certificationId']) ? $data['certificationId'] : null;
        $this->container['certificationImageId'] = isset($data['certificationImageId']) ? $data['certificationImageId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets certificationImage
     *
     * @return string|mixed
     */
    public function getCertificationImage()
    {
        return $this->container['certificationImage'];
    }

    /**
     * Sets certificationImage
     *
     * @param string|mixed $certificationImage certificationImage
     *
     * @return $this
     */
    public function setCertificationImage($certificationImage)
    {
        $this->container['certificationImage'] = $certificationImage;

        return $this;
    }

    /**
     * Gets certificationImagePageNo
     *
     * @return int|mixed
     */
    public function getCertificationImagePageNo()
    {
        return $this->container['certificationImagePageNo'];
    }

    /**
     * Sets certificationImagePageNo
     *
     * @param int|mixed $certificationImagePageNo certificationImagePageNo
     *
     * @return $this
     */
    public function setCertificationImagePageNo($certificationImagePageNo)
    {
        $this->container['certificationImagePageNo'] = $certificationImagePageNo;

        return $this;
    }

    /**
     * Gets certificationCode
     *
     * @return string|mixed
     */
    public function getCertificationCode()
    {
        return $this->container['certificationCode'];
    }

    /**
     * Sets certificationCode
     *
     * @param string|mixed $certificationCode certificationCode
     *
     * @return $this
     */
    public function setCertificationCode($certificationCode)
    {
        $this->container['certificationCode'] = $certificationCode;

        return $this;
    }

    /**
     * Gets certificationName
     *
     * @return string|mixed
     */
    public function getCertificationName()
    {
        return $this->container['certificationName'];
    }

    /**
     * Sets certificationName
     *
     * @param string|mixed $certificationName certificationName
     *
     * @return $this
     */
    public function setCertificationName($certificationName)
    {
        $this->container['certificationName'] = $certificationName;

        return $this;
    }

    /**
     * Gets certificationNumber
     *
     * @return string|mixed
     */
    public function getCertificationNumber()
    {
        return $this->container['certificationNumber'];
    }

    /**
     * Sets certificationNumber
     *
     * @param string|mixed $certificationNumber certificationNumber
     *
     * @return $this
     */
    public function setCertificationNumber($certificationNumber)
    {
        $this->container['certificationNumber'] = $certificationNumber;

        return $this;
    }

    /**
     * Gets certificationId
     *
     * @return int|mixed
     */
    public function getCertificationId()
    {
        return $this->container['certificationId'];
    }

    /**
     * Sets certificationId
     *
     * @param int|mixed $certificationId certificationId
     *
     * @return $this
     */
    public function setCertificationId($certificationId)
    {
        $this->container['certificationId'] = $certificationId;

        return $this;
    }

    /**
     * Gets certificationImageId
     *
     * @return string|mixed
     */
    public function getCertificationImageId()
    {
        return $this->container['certificationImageId'];
    }

    /**
     * Sets certificationImageId
     *
     * @param string|mixed $certificationImageId certificationImageId
     *
     * @return $this
     */
    public function setCertificationImageId($certificationImageId)
    {
        $this->container['certificationImageId'] = $certificationImageId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


