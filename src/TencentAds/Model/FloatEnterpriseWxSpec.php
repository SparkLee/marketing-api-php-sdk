<?php
/**
 * FloatEnterpriseWxSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * FloatEnterpriseWxSpec Class Doc Comment
 *
 * @category Class
 * @description 添加商家微信组件元素
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FloatEnterpriseWxSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'float_enterprise_wx_spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cropId' => 'string',
        'groupId' => 'int',
        'btnTitle' => 'string',
        'fontColor' => 'string',
        'btnBgColorTheme' => 'string',
        'btnFontType' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cropId' => null,
        'groupId' => 'int64',
        'btnTitle' => null,
        'fontColor' => null,
        'btnBgColorTheme' => null,
        'btnFontType' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cropId' => 'crop_id',
        'groupId' => 'group_id',
        'btnTitle' => 'btn_title',
        'fontColor' => 'font_color',
        'btnBgColorTheme' => 'btn_bg_color_theme',
        'btnFontType' => 'btn_font_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cropId' => 'setCropId',
        'groupId' => 'setGroupId',
        'btnTitle' => 'setBtnTitle',
        'fontColor' => 'setFontColor',
        'btnBgColorTheme' => 'setBtnBgColorTheme',
        'btnFontType' => 'setBtnFontType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cropId' => 'getCropId',
        'groupId' => 'getGroupId',
        'btnTitle' => 'getBtnTitle',
        'fontColor' => 'getFontColor',
        'btnBgColorTheme' => 'getBtnBgColorTheme',
        'btnFontType' => 'getBtnFontType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cropId'] = isset($data['cropId']) ? $data['cropId'] : null;
        $this->container['groupId'] = isset($data['groupId']) ? $data['groupId'] : null;
        $this->container['btnTitle'] = isset($data['btnTitle']) ? $data['btnTitle'] : null;
        $this->container['fontColor'] = isset($data['fontColor']) ? $data['fontColor'] : null;
        $this->container['btnBgColorTheme'] = isset($data['btnBgColorTheme']) ? $data['btnBgColorTheme'] : null;
        $this->container['btnFontType'] = isset($data['btnFontType']) ? $data['btnFontType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cropId
     *
     * @return string|mixed
     */
    public function getCropId()
    {
        return $this->container['cropId'];
    }

    /**
     * Sets cropId
     *
     * @param string|mixed $cropId cropId
     *
     * @return $this
     */
    public function setCropId($cropId)
    {
        $this->container['cropId'] = $cropId;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return int|mixed
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param int|mixed $groupId groupId
     *
     * @return $this
     */
    public function setGroupId($groupId)
    {
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets btnTitle
     *
     * @return string|mixed
     */
    public function getBtnTitle()
    {
        return $this->container['btnTitle'];
    }

    /**
     * Sets btnTitle
     *
     * @param string|mixed $btnTitle btnTitle
     *
     * @return $this
     */
    public function setBtnTitle($btnTitle)
    {
        $this->container['btnTitle'] = $btnTitle;

        return $this;
    }

    /**
     * Gets fontColor
     *
     * @return string|mixed
     */
    public function getFontColor()
    {
        return $this->container['fontColor'];
    }

    /**
     * Sets fontColor
     *
     * @param string|mixed $fontColor fontColor
     *
     * @return $this
     */
    public function setFontColor($fontColor)
    {
        $this->container['fontColor'] = $fontColor;

        return $this;
    }

    /**
     * Gets btnBgColorTheme
     *
     * @return string|mixed
     */
    public function getBtnBgColorTheme()
    {
        return $this->container['btnBgColorTheme'];
    }

    /**
     * Sets btnBgColorTheme
     *
     * @param string|mixed $btnBgColorTheme btnBgColorTheme
     *
     * @return $this
     */
    public function setBtnBgColorTheme($btnBgColorTheme)
    {
        $this->container['btnBgColorTheme'] = $btnBgColorTheme;

        return $this;
    }

    /**
     * Gets btnFontType
     *
     * @return int|mixed
     */
    public function getBtnFontType()
    {
        return $this->container['btnFontType'];
    }

    /**
     * Sets btnFontType
     *
     * @param int|mixed $btnFontType btnFontType
     *
     * @return $this
     */
    public function setBtnFontType($btnFontType)
    {
        $this->container['btnFontType'] = $btnFontType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


