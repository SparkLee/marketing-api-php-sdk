<?php
/**
 * CustomLabelStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * CustomLabelStruct Class Doc Comment
 *
 * @category Class
 * @description 标签信息
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomLabelStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'custom_label_struct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'levelId' => 'int',
        'labelName' => 'string',
        'firstMaterialLabelLevelId' => 'int',
        'firstMaterialLabelLevelName' => 'string',
        'secondMaterialLabelLevelId' => 'int',
        'secondMaterialLabelLevelName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'levelId' => 'int64',
        'labelName' => null,
        'firstMaterialLabelLevelId' => 'int64',
        'firstMaterialLabelLevelName' => null,
        'secondMaterialLabelLevelId' => 'int64',
        'secondMaterialLabelLevelName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'levelId' => 'level_id',
        'labelName' => 'label_name',
        'firstMaterialLabelLevelId' => 'first_material_label_level_id',
        'firstMaterialLabelLevelName' => 'first_material_label_level_name',
        'secondMaterialLabelLevelId' => 'second_material_label_level_id',
        'secondMaterialLabelLevelName' => 'second_material_label_level_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'levelId' => 'setLevelId',
        'labelName' => 'setLabelName',
        'firstMaterialLabelLevelId' => 'setFirstMaterialLabelLevelId',
        'firstMaterialLabelLevelName' => 'setFirstMaterialLabelLevelName',
        'secondMaterialLabelLevelId' => 'setSecondMaterialLabelLevelId',
        'secondMaterialLabelLevelName' => 'setSecondMaterialLabelLevelName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'levelId' => 'getLevelId',
        'labelName' => 'getLabelName',
        'firstMaterialLabelLevelId' => 'getFirstMaterialLabelLevelId',
        'firstMaterialLabelLevelName' => 'getFirstMaterialLabelLevelName',
        'secondMaterialLabelLevelId' => 'getSecondMaterialLabelLevelId',
        'secondMaterialLabelLevelName' => 'getSecondMaterialLabelLevelName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['levelId'] = isset($data['levelId']) ? $data['levelId'] : null;
        $this->container['labelName'] = isset($data['labelName']) ? $data['labelName'] : null;
        $this->container['firstMaterialLabelLevelId'] = isset($data['firstMaterialLabelLevelId']) ? $data['firstMaterialLabelLevelId'] : null;
        $this->container['firstMaterialLabelLevelName'] = isset($data['firstMaterialLabelLevelName']) ? $data['firstMaterialLabelLevelName'] : null;
        $this->container['secondMaterialLabelLevelId'] = isset($data['secondMaterialLabelLevelId']) ? $data['secondMaterialLabelLevelId'] : null;
        $this->container['secondMaterialLabelLevelName'] = isset($data['secondMaterialLabelLevelName']) ? $data['secondMaterialLabelLevelName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets levelId
     *
     * @return int|mixed
     */
    public function getLevelId()
    {
        return $this->container['levelId'];
    }

    /**
     * Sets levelId
     *
     * @param int|mixed $levelId levelId
     *
     * @return $this
     */
    public function setLevelId($levelId)
    {
        $this->container['levelId'] = $levelId;

        return $this;
    }

    /**
     * Gets labelName
     *
     * @return string|mixed
     */
    public function getLabelName()
    {
        return $this->container['labelName'];
    }

    /**
     * Sets labelName
     *
     * @param string|mixed $labelName labelName
     *
     * @return $this
     */
    public function setLabelName($labelName)
    {
        $this->container['labelName'] = $labelName;

        return $this;
    }

    /**
     * Gets firstMaterialLabelLevelId
     *
     * @return int|mixed
     */
    public function getFirstMaterialLabelLevelId()
    {
        return $this->container['firstMaterialLabelLevelId'];
    }

    /**
     * Sets firstMaterialLabelLevelId
     *
     * @param int|mixed $firstMaterialLabelLevelId firstMaterialLabelLevelId
     *
     * @return $this
     */
    public function setFirstMaterialLabelLevelId($firstMaterialLabelLevelId)
    {
        $this->container['firstMaterialLabelLevelId'] = $firstMaterialLabelLevelId;

        return $this;
    }

    /**
     * Gets firstMaterialLabelLevelName
     *
     * @return string|mixed
     */
    public function getFirstMaterialLabelLevelName()
    {
        return $this->container['firstMaterialLabelLevelName'];
    }

    /**
     * Sets firstMaterialLabelLevelName
     *
     * @param string|mixed $firstMaterialLabelLevelName firstMaterialLabelLevelName
     *
     * @return $this
     */
    public function setFirstMaterialLabelLevelName($firstMaterialLabelLevelName)
    {
        $this->container['firstMaterialLabelLevelName'] = $firstMaterialLabelLevelName;

        return $this;
    }

    /**
     * Gets secondMaterialLabelLevelId
     *
     * @return int|mixed
     */
    public function getSecondMaterialLabelLevelId()
    {
        return $this->container['secondMaterialLabelLevelId'];
    }

    /**
     * Sets secondMaterialLabelLevelId
     *
     * @param int|mixed $secondMaterialLabelLevelId secondMaterialLabelLevelId
     *
     * @return $this
     */
    public function setSecondMaterialLabelLevelId($secondMaterialLabelLevelId)
    {
        $this->container['secondMaterialLabelLevelId'] = $secondMaterialLabelLevelId;

        return $this;
    }

    /**
     * Gets secondMaterialLabelLevelName
     *
     * @return string|mixed
     */
    public function getSecondMaterialLabelLevelName()
    {
        return $this->container['secondMaterialLabelLevelName'];
    }

    /**
     * Sets secondMaterialLabelLevelName
     *
     * @param string|mixed $secondMaterialLabelLevelName secondMaterialLabelLevelName
     *
     * @return $this
     */
    public function setSecondMaterialLabelLevelName($secondMaterialLabelLevelName)
    {
        $this->container['secondMaterialLabelLevelName'] = $secondMaterialLabelLevelName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


